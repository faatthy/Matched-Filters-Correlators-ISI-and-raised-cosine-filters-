%%%%%%%%%%Matched Filters, Correlators, ISI, and raised cosine%%%%%%%%%%%%%
close all;
clear;
clc;
%%part 1 Matched filters and correlators in noise free environment%%
A=1;   %voltage level
TS=1; %bit duartion
sampling_time=0.2; % we will take 5 samples for each bit 
num_bits=10;
num_sample=num_bits*(TS/sampling_time);

data =randi([0,1],1,num_bits);  %generate bits 
data_mapping=2*data-1;   %mapping data to-1,1
data_upsampling=upsample(data_mapping,(TS/sampling_time)); %represnting every bit using 5 samples 
%and the rest be zeros

p=[5 4 3 2 1]/sqrt(55);    %pulse shaping with unit energy

y=conv(data_upsampling,p);  % y equal convolution of data_upsampling and the pulse shaping signal
y=y(1:num_sample); %convolution change size of data streamed
t = 0 : sampling_time : (num_sample - 1)*sampling_time; %start from zero until reach all samples
%plot the using pulse shaping
figure ;
plot(p);
title("Using pulse shaping");
xlabel("Time");
ylabel("Amplitude");

figure;
stem(t,data_upsampling);
title("Impulse train");
xlabel("Time [Ts sec]");
ylabel("Amplitude");
figure ;
plot(t,y);
title("Output of convolution");
xlabel("Time [Ts sec]");
ylabel("Amplitude");

%%design of matched filter
matched_filter=fliplr(p);   % Matched filter (flipped pulse)
filter_2=ones(1,(TS/sampling_time))/sqrt(TS/sampling_time);     %rect filter normalized
matched_filter_output=conv(matched_filter,y);
filter_2_output=conv(filter_2,y);
t_conv_adjust=sampling_time : sampling_time : (size(matched_filter_output,2))*sampling_time;
matched_filter_output_sampled=zeros(size(matched_filter_output));
filter_2_output_sampled=zeros(size(matched_filter_output));
for i=1:5:num_sample
    matched_filter_output_sampled(i+4)=matched_filter_output(i+4);
    filter_2_output_sampled(i+4)= filter_2_output(i+4);
end

figure;
subplot(2,1,1);
plot(t_conv_adjust,matched_filter_output,'r');
hold on
stem(t_conv_adjust,matched_filter_output_sampled,'r','filled')
title("Matched filter output");
xlabel("Time [Ts sec]");
ylabel("Amplitude");
axis ([0 11 -1 1]);
subplot(2,1,2);
plot(t_conv_adjust,filter_2_output,'b');
hold on
stem(t_conv_adjust,filter_2_output_sampled,'b','filled')
title("Rect filter output");
xlabel("Time [Ts sec]");
ylabel("Amplitude");
axis ([0 11 -1 1]);

%%correlator%%

correlator_output = zeros(size(matched_filter_output)); 
%repeat the pulse shape function by number of bits
pulse_shaping_correlator = repmat(p, 1, num_bits);   %repeat pulse shaping the number of bits
sum_corr = 0; %initialization of integrator result

for i = 1 : num_sample
    if mod((i-1), 5) == 0    %(i-1)%5
        sum_corr = 0;
    end
    correlator_output(i) = sum_corr + (pulse_shaping_correlator(i) * y(i));
    sum_corr = correlator_output(i);
end
correlator_output_sampled=zeros(size(matched_filter_output));
for i=1:5:num_sample
    correlator_output_sampled(i+4)=correlator_output(i+4);
end
figure
subplot(2,1,1)
plot(t_conv_adjust,matched_filter_output,'r');
hold on ;
stem(t_conv_adjust,matched_filter_output_sampled,'r','filled');
title("Matched filter Output");
xlabel("Time [Ts sec]");
ylabel("Amplitude");
axis ([0 11 -1 1]);
subplot(2,1,2)
plot(t_conv_adjust,correlator_output,'b');
hold on ;
stem(t_conv_adjust,matched_filter_output_sampled,'b','filled');
title("Correlator Output");
xlabel("Time [Ts sec]");
ylabel("Amplitude");
axis ([0 11 -1 1]);
figure
plot(t_conv_adjust,matched_filter_output,'r');
hold on ;
plot(t_conv_adjust,correlator_output,'b');
hold on;
stem(t_conv_adjust,matched_filter_output_sampled,'k','filled');
title("Matched filter VS correlator");
xlabel("Time [Ts sec]");
ylabel("Amplitude");
legend('Matched Filter Output', 'Correlator Output','Sampling instants');
axis ([0 11 -1 1]);
%%%
noise_num_bits=10000;
noise_data = randi([0,1],1,noise_num_bits); %generating 10000 random bits
noise_data_mapping = (2*noise_data - 1); %converting 0 to -1 and 1 to +1
noise_data_upsampling = upsample(noise_data_mapping,5); %sapmle every 200ms
y_noise= conv(noise_data_upsampling,p); %output of the transmitter
y_noise(:,50001:50004) = []; %taking only nonzero values
noise = randn(1,size(y_noise,2));
No=1;
Eb=sum(p .^2);
x=1;
Rect_Filter_BER=zeros(1,8);
Matched_Filter_BER=zeros(1,8);
Theoretical_BER=zeros(1,8);
for j=-2:5
    No=Eb/(10^(j/10));
    noise_scaled = noise.*sqrt(No/2);
    v_noise = y_noise+noise_scaled; %adding noise to signal
%Matched and normalized filters---------------------------------
matched_filter_noise = fliplr(p);
matched_filter_noise_out = conv(v_noise , matched_filter_noise);
rect_filter_noise = [5 5 5 5 5]/sqrt(125);
rect_filter_noise_out = conv(v_noise,rect_filter_noise);
for i=1:noise_num_bits
    matched_filter_noise_out_Sampled(i) = matched_filter_noise_out(i*5); %sampling every Ts=5*200ms
    rect_filter_noise_out_Sampled(i) = rect_filter_noise_out(i*5);
end
%Comparing with threshold for matched filter
for i = 1:length(matched_filter_noise_out_Sampled)
    if matched_filter_noise_out_Sampled(i)<0
        matched_filter_noise_out_Sampled(i) = -1;
    elseif matched_filter_noise_out_Sampled(i)>0
        matched_filter_noise_out_Sampled(i) = 1;
    end
end
%Comparing with threshold for matched filter
for i = 1:length(rect_filter_noise_out_Sampled)
    if rect_filter_noise_out_Sampled(i)<0
        rect_filter_noise_out_Sampled(i) = -1;
    elseif rect_filter_noise_out_Sampled(i)>0
        rect_filter_noise_out_Sampled(i) = 1;
    end
end
%Getting BER------------------------------------------------------
%ber
ber_matched_fitler_sum=0;
ber_RECT_sum=0;
for i=1:length(matched_filter_noise_out_Sampled)
    if(matched_filter_noise_out_Sampled(i)~= noise_data_mapping(i))
        ber_matched_fitler_sum=ber_matched_fitler_sum+1;
    end
end
for i=1:length(rect_filter_noise_out_Sampled)
    if(rect_filter_noise_out_Sampled(i)~= noise_data_mapping(i))
        ber_RECT_sum=ber_RECT_sum+1;
    end
end
Theoretical_BER(x)=0.5*erfc(sqrt(Eb/No));%Getting theoritical BER
Matched_Filter_BER(x)=ber_matched_fitler_sum/noise_num_bits;
Rect_Filter_BER(x)=ber_RECT_sum/noise_num_bits;
x=x+1;
end
%Plots------------------------------------------------------------
figure;
semilogy(-2:5,Matched_Filter_BER,'b');
hold on
semilogy(-2:5,Rect_Filter_BER,'r');
hold on
semilogy(-2:5, Theoretical_BER,'g');
xlabel('Eb/No');
ylabel('BER');
legend('matched filter BER','rect filter BER','Theoretical BER');
title('Matched Filter BER ,rect Filter BER & Theoretical BER');


%%ISI %%%%%%
ISI_num_bits=100;
ISI_data=randi([0,1],1,ISI_num_bits);
ISI_data_mapping=(2*ISI_data - 1);
ISI_data_upsampling=upsample(ISI_data_mapping,5);
R=[0 0 1 1];  %different roll of factor
delay=[2 8 2 8];  %different delays
for i=1:4
    square_root_raised_cosine=rcosine(TS,TS/sampling_time,'sqrt', R(i), delay(i));
    figure ('Name', 'SRRC');
    plot( square_root_raised_cosine);
    title(sprintf('SRRC of R = %d delay = %d', R(i), delay(i)));

    TX=conv(ISI_data_upsampling,square_root_raised_cosine,'valid');
    RX=conv(TX,square_root_raised_cosine,'valid');
    eyediagram(TX,2*TS/sampling_time);
    title(sprintf('transmitted signal when R = %s\ndelay = %s', string(R(i)), string(delay(i))));
    eyediagram(RX,2*TS/sampling_time);
    title(sprintf('received signal when R = %s\ndelay = %s', string(R(i)), string(delay(i))));
end
